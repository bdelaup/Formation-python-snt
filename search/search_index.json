{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programme","text":""},{"location":"#programme-formation","title":"Programme formation","text":"<ol> <li>Python<ol> <li>Description</li> <li>Types en python<ol> <li>Types de base  </li> <li>Types construit</li> </ol> </li> <li>Python et l'objet<ol> <li>Classe</li> <li>H\u00e9ritage</li> <li>Polymorphisme</li> </ol> </li> </ol> </li> <li>Microbit<ol> <li>Description hardware</li> <li>Python &amp; Micropython</li> <li>EDI</li> </ol> </li> <li>Activit\u00e9s<ol> <li>unet<ol> <li>Client / Server</li> <li>DNS</li> <li>MQTT</li> </ol> </li> <li>Pandas</li> <li>Follium</li> <li>Photo</li> </ol> </li> </ol>"},{"location":"python_generalite/","title":"G\u00e9n\u00e9ralit\u00e9s","text":""},{"location":"python_generalite/#quest-python","title":"Qu'est Python","text":"<p>Python3 est un langage de programmation interpr\u00e9t\u00e9, multi-paradigme et multiplate-forme. Il favorise la programmation imp\u00e9rative structur\u00e9e, fonctionnelle et orient\u00e9e objet. Il est dot\u00e9 d'un typage dynamique fort, d'une gestion automatique de la m\u00e9moire par ramasse-miettes et d'un syst\u00e8me de gestion d'exceptions.</p> <p>Aujourd'hui, python est soutenue par Python Software Fondation, PSF. Cette organisme se donne pour mission :</p> <ul> <li>d'\u00e9diter les sp\u00e9cifications de python (les fameuse PEP, python enhancement proposal)</li> <li>de maintenir une plateforme de gestion de paquet Pypi6</li> <li>de maintenir une version de python cpython</li> <li>...</li> </ul> <p>PSF est pr\u00e9sid\u00e9 par le cr\u00e9ateur de python en 1991, Guido Von Rossum.</p> <p>Il existe en fait de nombreuses version de python:</p> <ul> <li>CPython1 : la version officiel de r\u00e9f\u00e9rence. L'interpreteur est \u00e9crit en c est compil\u00e9 pour de nombreuse plateforme (OS : windows, linux, Mac, plusieurs version d'unix ; processeur ARM, x86, AIX, AS/400).</li> <li>MicroPython2 : impl\u00e9mentation l\u00e9g\u00e8re de python en <code>C</code> \u00e0 destination des microcontr\u00f4leurs (principalement les architectures ESP\u00a9 et ARM\u00a9, mais fonction sous windows et linux).</li> <li>Jython : le code python est compil\u00e9 en bytecode <code>Java</code> pour \u00eatre interpr\u00e9ter sur une machine virtuelle Java. Cela permet un grande interop\u00e9rabilit\u00e9 entre Java et Python.</li> <li>IronPython : impl\u00e9mentation .NET (Microsoft) \u00e9crit en <code>C#</code> pour permette l\u2019interop\u00e9rabilit\u00e9 de code .NET et Python.</li> <li>PyPy : interpr\u00e9teur python \u00e9crit en <code>python</code>.</li> </ul> <p>Nous ne nous attarderons que sur les deux premi\u00e8res impl\u00e9mentations. Les explications donn\u00e9es ci-dessous sont valable pour CPython. Nous mettrons en lumi\u00e8re quelques differences avec MicroPython.</p>"},{"location":"python_generalite/#langage-interprete","title":"Langage interpr\u00e9t\u00e9","text":""},{"location":"python_generalite/#un-peu-de-vocabulaire","title":"Un peu de vocabulaire","text":"<p>En informatique, un interpr\u00e9teur4 est un outil dont la t\u00e2che est d'analyser, de traduire et d'ex\u00e9cuter les programmes \u00e9crits dans un langage informatique. </p> <p>Un interpr\u00e8te se distingue d\u2019un compilateur par le fait qu\u2019il effectue l\u2019analyse et la traduction n\u00e9cessaires \u00e0 l'ex\u00e9cution d\u2019un programme donn\u00e9 non pas une fois pour toutes, mais \u00e0 chaque ex\u00e9cution de ce programme. L\u2019ex\u00e9cution n\u00e9cessite ainsi de disposer non seulement du programme, mais aussi de l\u2019interpr\u00e9teur correspondant. </p> <p>Python est un langage interpr\u00e9t\u00e9 car le programme python n\u00e9cessite un programme tiers pour \u00eatre ex\u00e9cut\u00e9. Contrairement \u00e0 un programme C compil\u00e9 qui est nativement ex\u00e9cutable par la machine, le code python va subir plusieurs traitements avant de pouvoir \u00eatre ex\u00e9cuter.</p> <p>Lorsque l'interpr\u00e9teur python d\u00e9marre il propose une invite de commande dans laquelle on peut \u00e9crire du code en langage python.</p> <p></p> <p>Cette fen\u00eatre aust\u00e8re se nomme REPL : Read\u2013eval\u2013print loop 5.</p> <p>On appelle script python un fichier <code>.py</code> contenant des commandes python dont les lignes seront interpr\u00e9t\u00e9es l'une apr\u00e8s l'autre par l'interpr\u00e9teur.</p>"},{"location":"python_generalite/#interprete-ou-compile","title":"Interpr\u00e9t\u00e9 ou compil\u00e9 ?","text":"<p>On parle bien d'interpr\u00e9t\u00e9 puisque le code est r\u00e9-\u00e9valu\u00e9 \u00e0 chaque ex\u00e9cution. Cependant, l'\u00e9valuation n'est pas imm\u00e9diate :</p> <p></p> <ol> <li>Le logiciel <code>python.exe</code> est lancer et le programme script.py lui est transmis en ex\u00e9cutant <code>python fichier.py</code></li> <li><code>python.exe</code> analyse script.py pour en v\u00e9rifier la syntaxe</li> <li><code>python.exe</code> compile script.py en langage de bas niveau ind\u00e9pendant de la plateforme appel\u00e9 bytecode. Le fichier cr\u00e9\u00e9 s'appelle script.pyc. Le bytecode ressemble \u00e0 un code assembleur.</li> <li><code>python.exe</code> active ensuite une machine virtuel qui va faire ex\u00e9cuter \u00e0 l'ordinateur les ligne du fichier <code>script.pyc</code> instruction par instruction en utilisant les biblioth\u00e8ques et module de l'environnement python. </li> <li>Comme pour n'importe quel programme, lorsque la machine virtuelle \u00e0 besoin d'acc\u00e9der \u00e0 des p\u00e9riph\u00e9riques (clavier, \u00e9cran, souris, carte r\u00e9seau), d'allouer de la m\u00e9moire, etc...  <code>python.exe</code> fait des appels syst\u00e8me au syst\u00e8me d'exploitation pour r\u00e9alis\u00e9 l'action.</li> </ol> <p>Voici ce \u00e0 quoi ressemble le bytecode Python :</p> PythonBytecode <pre><code>&gt;&gt;&gt; def hello():\n...     print(\"Hello World!\")\n</code></pre> <pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(hello)\n2           0 LOAD_GLOBAL              0 (print)\n2 LOAD_CONST               1 ('Hello World!')\n4 CALL_FUNCTION            1\n6 POP_TOP\n8 LOAD_CONST               0 (None)\n10 RETURN_VALUE\n</code></pre>"},{"location":"python_generalite/#micropython-dans-tout-ca","title":"MicroPython dans tout \u00e7a ?","text":"<p>L'impl\u00e9mentation MicroPython correspond \u00e0 la version 3.5 de CPython (contre 3.11 pour la version actuelle).</p> <p>MicroPython porte l'essentielles des fonctionnalit\u00e9 de python. M\u00eame si certaines interface de programmation ont \u00e9t\u00e9 simplifi\u00e9es et que l'impl\u00e9mentation des fonctions est simplifi\u00e9, le r\u00e9sultat est \u00e9tonnamment complet, l\u00e9ger et performant.</p> <p></p> <p>En ce qui concerne MicroPython, le principe d'interpr\u00e9tation du code est le similaire. Apportons quelques compl\u00e9ments:</p> <ul> <li>Sur un microcontr\u00f4leur ou est install\u00e9 MicroPython, c'est lui qui fait office de syst\u00e8me d'exploitation :<ul> <li>Abstrait le mat\u00e9riel pour offrir une interface de programmation identique quelque soit la plateforme</li> <li>G\u00e8re la m\u00e9moire7</li> <li>G\u00e8re les t\u00e2ches et le multit\u00e2che dans une certaine mesure. </li> </ul> </li> <li>MicroPython n'est \"rien d'autre\" qu'un programme \u00e9crit en <code>C</code> compil\u00e9 pour s'ex\u00e9cuter sur le microcontr\u00f4leur.</li> <li>MicroPython est stocker en m\u00e9moire de masse, souvent la m\u00e9moire flash</li> <li>Les fichier <code>.py</code> sont stocker en m\u00e9moire flash</li> <li>Les fichier <code>.mpy</code> ne sont pas stocker et compiler \u00e0 chaque red\u00e9marrage du syst\u00e8me quand on fait appel \u00e0 la directive <code>import</code>. Le bytecode est stock\u00e9 en RAM sur certaines plateforme il est possible de pr\u00e9compil\u00e9 les fichier .py en .pyc \u00e0 l'aide de <code>mpy-tool.py</code>9 ou <code>mpy_cross</code>8</li> <li>Micropython est modulaire : \u00e0 la compilation on peut choisir les modules qui seront disponible.</li> </ul> <p>A propos du multit\u00e2che</p> <p>A propos de la gestion des t\u00e2che il n'est pour l'instant pas possible d'utiliser un ordonnanceur pr\u00e9emptif mais il est possible d'utiliser une ordonnanceur collaboratif avec la biblioth\u00e8que <code>asyncio</code>, de faire des calculs parall\u00e8le sur les microcontr\u00f4leurs multi-coeur avec la biblioth\u00e8que <code>_thread</code>, ou de g\u00e9rer des routines d'interruption (d\u00e9tection de front sur les broche, timers)</p>"},{"location":"python_generalite/#langage-multi-paradigme","title":"Langage multi-paradigme","text":"<p>Python est dit multi-paradigme. Un paradigme en programmation est une fa\u00e7on de d\u00e9crire le comportement d'un programme.</p> <p>On parle de programmation :</p> <ul> <li>Imp\u00e9rative : permet des approches de programmation imp\u00e9rative (s\u00e9quence, affectation, branchement conditionnel si, branchement goto, boucle)</li> <li>Fonctionnelle : la programmation consiste \u00e0 d\u00e9clarer des fonctions et leurs conditions d'ex\u00e9cution. L'environnement d'ex\u00e9cution se charge de constituer la pile d'appel en \"branchant\" les valeurs retourn\u00e9e par les fonctions sur les param\u00e8tre d'entr\u00e9e d'autres fonctions. La programmation fonctionnelle abouti \u00e0 des programmes sans \u00e9tat, il ne peut pas exister de variable partag\u00e9e \u00e0 l'ext\u00e9rieur d'une fonction. </li> <li>Orient\u00e9 objet : la programmation orient\u00e9 objet fait de l'objet l'entit\u00e9 de base. Un objet poss\u00e8de un \u00e9tat intrins\u00e8que contenu dans ses attribut et des m\u00e9thodes que l'on peut appeler pour que l'objet op\u00e8re des actions sur ses propres attribut, modifiant ainsi l'\u00e9tat d'ex\u00e9cution du programme.</li> </ul>"},{"location":"python_generalite/#langage-multi-plateformes","title":"Langage multi-plateformes","text":"<ol> <li> <p>https://www.python.org/  \u21a9</p> </li> <li> <p>https://micropython.org/  \u21a9</p> </li> <li> <p> https://fr.wikipedia.org/wiki/Python_(langage)  \u21a9</p> </li> <li> <p> https://fr.wikipedia.org/wiki/Interpr%C3%A8te_(informatique) \u21a9</p> </li> <li> <p> https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop \u21a9</p> </li> <li> <p> https://pypi.org/ \u21a9</p> </li> <li> <p>La gestion de la m\u00e9moire par python \u21a9</p> </li> <li> <p>Compilateur MicroPython multi-plateformes \u21a9</p> </li> <li> <p>Compilateur MicroPython officiel \u21a9</p> </li> </ol>"},{"location":"python_objet/","title":"Python et l'objet","text":""},{"location":"python_objet/#introduction","title":"Introduction","text":"<p>Consid\u00e9rons deux aspects des traitements informatiques:</p> <ul> <li>l'information : c'est ce qui caract\u00e9rise l'\u00e9tat de la machine </li> <li>les traitements : les traitements vont permettre de passer d'un \u00e9tat initial \u00e0 un \u00e9tat final</li> </ul> <pre><code>graph LR\n  A([Etat A])\n  B([Etat B])\n\n  A -- \"Traitements\" --&gt; B</code></pre>"},{"location":"python_objet/#la-programmation-imperative","title":"La programmation imp\u00e9rative","text":"<p>On conna\u00eet les variables qui symbolisent des informations. On conna\u00eet \u00e9galement l'op\u00e9rateur d'affectation qui permet de modifier l'\u00e9tat d'une variable en fonction de :</p> <ul> <li>Une ou plusieurs variable</li> <li>Un op\u00e9rateur ou une fonction</li> </ul> <p>Une variable se d\u00e9finit par :</p> <ul> <li>son type</li> <li>son nom</li> </ul> <pre><code>a = 10\nb = 9\nc = a + b\n# c symbolise le contenu d'un espace m\u00e9moire contenant la valeur 19\n</code></pre> <p></p> <p>Programmation imp\u00e9rative</p> <p>L'\u00e9tat de la machine est caract\u00e9ris\u00e9e par :</p> <ul> <li>le contenu des variables </li> <li>l'instruction en cours de traitement (pointeur d'instruction)</li> </ul> <p>Les traitements sont :</p> <ul> <li>les instructions en cela que le passage d'une instruction \u00e0 l'autre modifie le pointeur d'instruction</li> <li>l'op\u00e9rateur d'affectation</li> </ul>"},{"location":"python_objet/#la-programmation-orientee-objet","title":"La programmation orient\u00e9e objet","text":"<p>Programmation orient\u00e9 objet</p> <p>L'\u00e9tat de la machine est caract\u00e9ris\u00e9e par :</p> <ul> <li>les relations entre les objets</li> <li>l'\u00e9tat des attributs des objets</li> </ul> <p>Les traitements sont :</p> <ul> <li>Les m\u00e9thodes permettant d'acc\u00e9der aux attributs d'un objet.</li> </ul>"},{"location":"python_objet/#lobjet-en-python","title":"L'objet en python'","text":""},{"location":"python_type/","title":"Les types","text":""},{"location":"python_type/#introduction","title":"Introduction","text":"<p>Les types sont des mod\u00e8les algorithmiques de repr\u00e9sentation des donn\u00e9es. Ils sont ind\u00e9pendant des langages de programmation.</p> <p>D\u00e9finition : type th\u00e9orique</p> <p>Un type th\u00e9orique est d\u00e9fini par :</p> <ul> <li>un nom</li> <li>les op\u00e9rations qu'il supporte</li> </ul> <p>Les langages de programmation d\u00e9finissent des types de donn\u00e9es. Ils sont d\u00e9riv\u00e9 des types th\u00e9orique mais leur impl\u00e9mentation s'en \u00e9loigne et/ou apportent des limitations. Les langages s'\u00e9loignent des types th\u00e9oriques notamment pour \"coller\" \u00e0 la \"philosophie\" du langage : pour facilit\u00e9 son \u00e9criture il faut parfois interdire des usages. Les limitations s'explique notamment par le fait que les programme s'ex\u00e9cute sur des machines poss\u00e9dant des limitations physiques. Chaque langage g\u00e8re ces limites de sa propre fa\u00e7on.</p> <p>Les langages g\u00e8re de fa\u00e7on diff\u00e9rentes le typage dans les programmes.</p> <p>Example</p> <p>Python est un langage dont le typage est dynamique et implicite.</p> En python<pre><code>valeur = True # valeur est alors dynamiquement typ\u00e9 bool et initialis\u00e9 \u00e0 True\nvaleur = 42 # valeur est alors automatique typ\u00e9 int et initialis\u00e9 \u00e0 42.\n</code></pre> <p>C++ est un langage dont le typage est statique et explicite.</p> En C++<pre><code>bool valeur = true; // valeur est statiquement typ\u00e9 bool et initialis\u00e9 \u00e0 true.    \n...\nvaleur = 42; // Impossible, il n'est pas possible de changer \n// dynamiquement le type d'une variable. \n// Il faudra en cr\u00e9er une autre.\n</code></pre>"},{"location":"python_type/#types-de-bases","title":"Types de bases","text":"<p>Parmi les types de bases on retiendra :</p> <ul> <li>les nombres entiers</li> <li>les nombres r\u00e9els</li> <li>les bool\u00e9en</li> <li>les cha\u00eenes de caract\u00e8res</li> </ul> Type th\u00e9orique Types python Op\u00e9rations Exemple python Entiers <code>int</code> Op\u00e9rations arithm\u00e9tiques (+,-,/,* ,//,%) et logique (==, !=, &gt;, &lt;, &lt;=, &gt;=) <code>a = 5*4/2</code> R\u00e9els <code>float</code> Op\u00e9rations arithm\u00e9tiques (+,-,/,* ) et logique (==, !=, &gt;, &lt;, &lt;=, &gt;=) <code>b = 5/3x4.2</code> Bool\u00e9en <code>bool</code> Op\u00e9rations bool\u00e9enne (NOT, OR, AND) et logiques (==, !=) <code>c = True AND NOT(False)== FALSE</code> Cha\u00eene <code>str</code> Concat\u00e9nation et op\u00e9rations logiques (==, !=) <code>d = \"Bon\"+\"jour\"</code>"},{"location":"python_type/#types-construits","title":"Types construits","text":""},{"location":"python_type/#introduction_1","title":"Introduction","text":"<p>Les types construits sont des types qui agr\u00e8gent plus plusieurs donn\u00e9es. Ces donn\u00e9es peuvent \u00eatre d'un type de base, mais \u00e9galement d'un type construit. Nous verrons les listes <code>list</code>, les dictionnaires <code>dict</code>, les tuples <code>tuple</code>.</p> <p>Il existe beaucoup d'autres types natifs en python : <code>set</code>, <code>range</code>, <code>bytes</code>, <code>bytearray</code> ...</p>"},{"location":"python_type/#les-tuple-p-uplets","title":"Les tuple (p-uplets)","text":"<p>Definition</p> <p>Un <code>tuple</code> est un ensemble de valeurs de types identiques ou diff\u00e9rents. Chaque \u00e9l\u00e9ment est accessible par sa position dans le <code>tuple</code>.</p> <p>En python</p> <p>Le type <code>tuple</code> est souvent le type retenu pour travailler avec des \u00e9l\u00e9ments du type th\u00e9orique <code>p-uplet</code>. Attention, en python le <code>tuple</code> est immuable : une fois d\u00e9fini il est impossible de le modifier. </p> <p>Dans le cas ou il serait n\u00e9cessaire de modifier une valeur, il s'agira de cr\u00e9er un nouveau <code>tuple</code> ou d'utiliser le type <code>list</code>.</p> Exemple de tuple en python<pre><code>personnage = (\"Haddock\", \"Alcoolique\", 45) # Nom, m\u00e9tier, age\nage = personnage[2]\npersonnage[1] = \"Sobre\" # Impossible en python,\n# le capitaine reste alcoolique...    \n</code></pre> <p>Note</p> <p>Les indices des tuple commencent \u00e0 0. </p> <p>Le tuple est reconnaissable par ses parenth\u00e8ses ( ).</p> <pre><code>            perso[0]      perso[1]       perso[2]\n               |              |             |\nperso = (   \"Haddock\",     \"Capitaine\",    45)\n</code></pre>"},{"location":"python_type/#les-dictionnaire-dict-p-uplet-nommes","title":"Les dictionnaire dict (p-uplet nomm\u00e9s)","text":"<p>Definition</p> <p>Un <code>dict</code> est un ensemble de valeurs de types identiques ou diff\u00e9rents. Chaque \u00e9l\u00e9ment est associ\u00e9 \u00e0 une cl\u00e9 par laquelle on acc\u00e8de \u00e0 la valeur.</p> <p>Autrement dit, un <code>dict</code> est un ensemble de couple \"cl\u00e9 -&gt; valeur\".</p> <p>Les \u00e9l\u00e9ment d'un <code>dict</code> ne sont pas ordonn\u00e9s.</p> <p>En python</p> <p>Le type dictionnaire <code>dict</code> est le plus proche du type th\u00e9orique p-uplet nomm\u00e9.</p> Exemple de dictionnaire en Python<pre><code>personnage = {\"nom\" : \"Haddock\", \"metier\" : \"Alcoolique\", \"age\" : 45}\nage = personnage[\"age\"]\npersonnage[\"metier\"] = \"capitaine\" # Avec les dictionnaires en python,\n# le capitaine devient sobre ...\n</code></pre> <p>Note</p> <p>On acc\u00e8de \u00e0 une valeur gr\u00e2ce \u00e0 sa cl\u00e9. </p> <p>Le tuple est reconnaissable par ses accolades { }.</p> <p>En python la cl\u00e9 permettant d'acc\u00e9der \u00e0 une valeur doit \u00eatre immuable : <code>int</code>, <code>float</code>, <code>tuple</code>, <code>str</code>. </p> <pre><code>                perso[\"nom\"]         perso[\"metier\"]    perso[\"age\"]\n                    |                        |              |\nperso = {\"nom\" : \"Haddock\", \"metier\" : \"capitaine\", \"age\" : 45}\n</code></pre>"},{"location":"python_type/#les-listes-list-tableau","title":"Les listes list (tableau)","text":"<p>Definition</p> <p>Les \u00e9l\u00e9ments d'une <code>list</code> peuvent \u00eatre de m\u00eame type ou de type diff\u00e9rent   Une <code>list</code> poss\u00e8de une taille qui correspond au nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la <code>list</code>. Chaque \u00e9l\u00e9ment est accessible par un indice qui correspond \u00e0 son emplacement dans la <code>list</code>.</p> <p>En python</p> <p>Le type <code>list</code> est ce qui se rapproche le plus du tableau th\u00e9orique en python. Le type <code>list</code> de python d\u00e9passe largement la d\u00e9finition th\u00e9orique du tableau o\u00f9 les \u00e9l\u00e9ments y sont de m\u00eame type par exemple.</p> Exemple de list en Python<pre><code># Cr\u00e9ation d'une list de 3 cha\u00eene vide\ntaille_tab = 3\ntop3_prenom_fille = [\"\"] * taille_tab     \n# ou, si on veut une list initialis\u00e9\ntop3_prenom_gar\u00e7on = [\"Jo\", \"Jack\", \"William\"]  \n# ou une list vide\nl_vide = []                                     \ngarcon =  top3_prenom_garcon[1]   # garcon contiendra \"Jack\"\ntop3_prenom_fille[0] = \"Barbie\" # top3_prenom_fille -&gt; [\"Barbie\", \"Emma\", \"Louise\"]\ntop3_prenom_gar\u00e7on[3] = \"Awrell\" # INTERDIT !!! la liste ne contient que 3 \u00e9l\u00e9ments\ntaille_tableau = len(top3_prenom_gar\u00e7on) # taille_tableau -&gt; 3\n</code></pre> <p>Note</p> <p>Les indices d'une <code>list</code> commencent \u00e0 0. </p> <p>La <code>list</code> est reconnaissable par ses crochets [ ].</p> <p>La fonction <code>len()</code> permet de conna\u00eetre le nombre d'\u00e9l\u00e9ment dans une <code>list</code></p> <pre><code>            perso[0]      perso[1]       perso[2]\n               |              |             |\nperso = [   \"Haddock\",     \"Capitaine\",    45]\n</code></pre> <p>Note</p> <p>Il est possible d'ajouter des \u00e9l\u00e9ments \u00e0 une <code>list</code> grace \u00e0 la m\u00e9thode <code>append()</code></p> Append<pre><code>l = []\nl.append(\"a\")\nl.append(\"bb\")\nl.append(42)\n</code></pre> <p>La list (comme le tuple) est it\u00e9rable. On peut parcourir une list de la fa\u00e7on suivante : </p> CodeAffichage It\u00e9ration sur les \u00e9l\u00e9ments d'une list<pre><code>for elt in range(l):\nprint(elt)\n</code></pre> <pre><code>a\nbb\n42\n</code></pre>"},{"location":"python_type/#a-retenir","title":"A retenir","text":"<p>Python est un langage dont le typage est dynamique et implicite : il est d\u00e9cid\u00e9 automatiquement au moment de l'affectation par l\u2019interpr\u00e9teur. </p> <p>Il est possible de conna\u00eetre le type d'un \u00e9l\u00e9ment :</p> CodeAffichage <pre><code>a = \"abc\"\nb = 1\nc = True\nprint(type(a), type(b), type(c))\n</code></pre> <pre><code>&lt;class 'str'&gt; &lt;class 'int'&gt; &lt;class 'bool'&gt;\n</code></pre> <p>Type de base</p> Type th\u00e9orique Types python Op\u00e9rations Exemple python Entiers <code>int</code> Op\u00e9rations arithm\u00e9tiques (+,-,/,* ,//,%) et logique (==, !=, &gt;, &lt;, &lt;=, &gt;=) <code>a = 5*4/2</code> R\u00e9els <code>float</code> Op\u00e9rations arithm\u00e9tiques (+,-,/,* ) et logique (==, !=, &gt;, &lt;, &lt;=, &gt;=) <code>b = 5/3x4.2</code> Bool\u00e9en <code>bool</code> Op\u00e9rations bool\u00e9enne (NOT, OR, AND) et logiques (==, !=) <code>c = True AND NOT(False)== FALSE</code> Cha\u00eene <code>str</code> Concat\u00e9nation et op\u00e9rations logiques (==, !=) <code>d = \"Bon\"+\"jour\"</code> <p>Type construit</p> # Type python Initialisation Tuple <code>tuple</code> <code>val = (\"haddock\", \"capitaine\", 42)</code> Dictionnaire <code>dict</code> <code>val = {\"nom\":\"haddock\", \"metier\":\"capitaine\", age : 42}</code> Liste <code>list</code> <code>val = [\"haddock\", \"capitaine\", 42]</code> # Mise \u00e0 jour Acc\u00e8s au m\u00e9tier Ajouter un \u00e9l\u00e9ment Tuple Impossible <code>valeur = val[1]</code> Impossible Dictionnaire <code>val[\"age\"] = 51</code> <code>valeur = val[\"metier\"]</code> <code>val[\"barbu\"] =True</code> Liste <code>val[2] = 51</code> <code>valeur = val[1]</code> <code>val.append(True)</code> <p>Les list</p> <p>Il est possible d'it\u00e9rer sur les \u00e9l\u00e9ments d'une <code>list</code> :</p> CodeAffichage <pre><code>ma_liste = [\"a\", \"bb\", 42]\nfor elt in ma_liste:\nprint(elt)\n</code></pre> <pre><code>a\nbb\n42\n</code></pre> <p>Il est possible de conna\u00eetre le nombre d'\u00e9l\u00e9ment dans une <code>liste</code> :</p> CodeAffichage <pre><code>ma_liste = [\"a\", \"bb\", 42]\nprint(\"Taille : \", len(ma_liste))\n</code></pre> <p>affichera <code>3</code></p> <p>Il est possible de cr\u00e9er un \"tableau\" de valeur pour it\u00e9rer sur une <code>list</code>.</p> CodeAffichage <pre><code>ma_liste = [\"a\", \"bb\", 42]\nfor i in range(3):\nprint(i, ma_liste[i])\n</code></pre> <pre><code>0 a\n1 bb\n2 42\n</code></pre>"},{"location":"python_type/#la-gestion-de-la-memoire-par-python","title":"La gestion de la m\u00e9moire par python","text":"<p>Python (et Micropython) g\u00e8re la m\u00e9moire \u00e0 l'aide d'un ramasse-miettes (garbage collector en Anglais).  En python, les variables contienne l'adresse des objets vers lesquels ils pointent. Chaque objet poss\u00e8de un compteur de r\u00e9f\u00e9rence. Lorsque l'objet est point\u00e9 par une nouvelle variable, le compteur est incr\u00e9ment\u00e9, lorsqu'une variable est supprim\u00e9, le compteur est d\u00e9cr\u00e9ment\u00e9. </p> <p>Lorsque l'interpr\u00e9teur est inactif, c'est \u00e0 dire pendant les appels \u00e0 <code>sleep()</code> par exemple, la machine virtuelle  (ou Virtual Machine VM) visite toutes les objets et lorsqu'il trouve un objet dont le compteur de r\u00e9f\u00e9rence vaut 0, il lib\u00e8re la m\u00e9moire utilis\u00e9e pour stocker l'objet.</p> <p>En cas de probl\u00e8me de saturation de la m\u00e9moire, on peut forcer la VM python \u00e0 ramasser les miettes en appelant la fonction <code>gc_collect()</code></p>"},{"location":"remerciements/","title":"Remerciements","text":"<p>\ud83d\ude4f Merci \u00e0 David Roche d'avoir partag\u00e9 son travail</p> <p>\ud83d\ude4f Merci \u00e0 Patrice P\u00e9rot d'avoir partag\u00e9 son travail</p> <p>\ud83d\ude4f Merci \u00e0 Maxime Fourny d'avoir partag\u00e9 son travail</p>"}]}